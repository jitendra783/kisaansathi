// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/services/common/db/portfolio.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	models "kisaanSathi/pkg/services/common/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPortfolioStore is a mock of PortfolioStore interface.
type MockPortfolioStore struct {
	ctrl     *gomock.Controller
	recorder *MockPortfolioStoreMockRecorder
}

// MockPortfolioStoreMockRecorder is the mock recorder for MockPortfolioStore.
type MockPortfolioStoreMockRecorder struct {
	mock *MockPortfolioStore
}

// NewMockPortfolioStore creates a new mock instance.
func NewMockPortfolioStore(ctrl *gomock.Controller) *MockPortfolioStore {
	mock := &MockPortfolioStore{ctrl: ctrl}
	mock.recorder = &MockPortfolioStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortfolioStore) EXPECT() *MockPortfolioStoreMockRecorder {
	return m.recorder
}

// GetDPDetails mocks base method.
func (m *MockPortfolioStore) GetDPDetails(ctx context.Context, compCode int, schemeCode, folioNo, matchAccount string) (*models.DpDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDPDetails", ctx, compCode, schemeCode, folioNo, matchAccount)
	ret0, _ := ret[0].(*models.DpDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDPDetails indicates an expected call of GetDPDetails.
func (mr *MockPortfolioStoreMockRecorder) GetDPDetails(ctx, compCode, schemeCode, folioNo, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDPDetails", reflect.TypeOf((*MockPortfolioStore)(nil).GetDPDetails), ctx, compCode, schemeCode, folioNo, matchAccount)
}

// GetDematUnblockedUnits mocks base method.
func (m *MockPortfolioStore) GetDematUnblockedUnits(ctx context.Context, matchAccount, dpID, dpClientID, stockCode, isinNumber string) (*models.UnblockedUnits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDematUnblockedUnits", ctx, matchAccount, dpID, dpClientID, stockCode, isinNumber)
	ret0, _ := ret[0].(*models.UnblockedUnits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDematUnblockedUnits indicates an expected call of GetDematUnblockedUnits.
func (mr *MockPortfolioStoreMockRecorder) GetDematUnblockedUnits(ctx, matchAccount, dpID, dpClientID, stockCode, isinNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDematUnblockedUnits", reflect.TypeOf((*MockPortfolioStore)(nil).GetDematUnblockedUnits), ctx, matchAccount, dpID, dpClientID, stockCode, isinNumber)
}

// GetUnblockedUnits mocks base method.
func (m *MockPortfolioStore) GetUnblockedUnits(ctx context.Context, compCode int, schemeCode, folioNo, matchAccount string) (*models.UnblockedUnits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnblockedUnits", ctx, compCode, schemeCode, folioNo, matchAccount)
	ret0, _ := ret[0].(*models.UnblockedUnits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnblockedUnits indicates an expected call of GetUnblockedUnits.
func (mr *MockPortfolioStoreMockRecorder) GetUnblockedUnits(ctx, compCode, schemeCode, folioNo, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnblockedUnits", reflect.TypeOf((*MockPortfolioStore)(nil).GetUnblockedUnits), ctx, compCode, schemeCode, folioNo, matchAccount)
}

// IsTransactionExistsForScheme mocks base method.
func (m *MockPortfolioStore) IsTransactionExistsForScheme(ctx context.Context, compCode int, schemeCode, matchAccount string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTransactionExistsForScheme", ctx, compCode, schemeCode, matchAccount)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTransactionExistsForScheme indicates an expected call of IsTransactionExistsForScheme.
func (mr *MockPortfolioStoreMockRecorder) IsTransactionExistsForScheme(ctx, compCode, schemeCode, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTransactionExistsForScheme", reflect.TypeOf((*MockPortfolioStore)(nil).IsTransactionExistsForScheme), ctx, compCode, schemeCode, matchAccount)
}
