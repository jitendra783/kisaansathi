// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/services/common/db/allocated_funds.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAllocatedFundsStore is a mock of AllocatedFundsStore interface.
type MockAllocatedFundsStore struct {
	ctrl     *gomock.Controller
	recorder *MockAllocatedFundsStoreMockRecorder
}

// MockAllocatedFundsStoreMockRecorder is the mock recorder for MockAllocatedFundsStore.
type MockAllocatedFundsStoreMockRecorder struct {
	mock *MockAllocatedFundsStore
}

// NewMockAllocatedFundsStore creates a new mock instance.
func NewMockAllocatedFundsStore(ctrl *gomock.Controller) *MockAllocatedFundsStore {
	mock := &MockAllocatedFundsStore{ctrl: ctrl}
	mock.recorder = &MockAllocatedFundsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllocatedFundsStore) EXPECT() *MockAllocatedFundsStoreMockRecorder {
	return m.recorder
}

// GetDepositLinkedLimits mocks base method.
func (m *MockAllocatedFundsStore) GetDepositLinkedLimits(ctx context.Context, matchAccount string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositLinkedLimits", ctx, matchAccount)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositLinkedLimits indicates an expected call of GetDepositLinkedLimits.
func (mr *MockAllocatedFundsStoreMockRecorder) GetDepositLinkedLimits(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositLinkedLimits", reflect.TypeOf((*MockAllocatedFundsStore)(nil).GetDepositLinkedLimits), ctx, matchAccount)
}

// GetLinkedLimits mocks base method.
func (m *MockAllocatedFundsStore) GetLinkedLimits(ctx context.Context, matchAccount string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedLimits", ctx, matchAccount)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedLimits indicates an expected call of GetLinkedLimits.
func (mr *MockAllocatedFundsStoreMockRecorder) GetLinkedLimits(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedLimits", reflect.TypeOf((*MockAllocatedFundsStore)(nil).GetLinkedLimits), ctx, matchAccount)
}

// GetTPALimits mocks base method.
func (m *MockAllocatedFundsStore) GetTPALimits(ctx context.Context, matchAccount string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTPALimits", ctx, matchAccount)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTPALimits indicates an expected call of GetTPALimits.
func (mr *MockAllocatedFundsStoreMockRecorder) GetTPALimits(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTPALimits", reflect.TypeOf((*MockAllocatedFundsStore)(nil).GetTPALimits), ctx, matchAccount)
}
