// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/services/common/db/user.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	models "kisaanSathi/pkg/services/common/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// GetAccountType mocks base method.
func (m *MockUserStore) GetAccountType(ctx context.Context, matchAccount string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountType", ctx, matchAccount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountType indicates an expected call of GetAccountType.
func (mr *MockUserStoreMockRecorder) GetAccountType(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountType", reflect.TypeOf((*MockUserStore)(nil).GetAccountType), ctx, matchAccount)
}

// GetCustodianFlag mocks base method.
func (m *MockUserStore) GetCustodianFlag(ctx context.Context, matchAccount string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustodianFlag", ctx, matchAccount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustodianFlag indicates an expected call of GetCustodianFlag.
func (mr *MockUserStoreMockRecorder) GetCustodianFlag(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustodianFlag", reflect.TypeOf((*MockUserStore)(nil).GetCustodianFlag), ctx, matchAccount)
}

// GetDematAccount mocks base method.
func (m *MockUserStore) GetDematAccount(ctx context.Context, matchAccount string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDematAccount", ctx, matchAccount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDematAccount indicates an expected call of GetDematAccount.
func (mr *MockUserStoreMockRecorder) GetDematAccount(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDematAccount", reflect.TypeOf((*MockUserStore)(nil).GetDematAccount), ctx, matchAccount)
}

// GetEBAUploadDate mocks base method.
func (m *MockUserStore) GetEBAUploadDate(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEBAUploadDate", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEBAUploadDate indicates an expected call of GetEBAUploadDate.
func (mr *MockUserStoreMockRecorder) GetEBAUploadDate(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEBAUploadDate", reflect.TypeOf((*MockUserStore)(nil).GetEBAUploadDate), ctx, userID)
}

// GetEuinNo mocks base method.
func (m *MockUserStore) GetEuinNo(ctx context.Context, userID, matchAccount, callAndTradeUserID string, isD2uUser bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEuinNo", ctx, userID, matchAccount, callAndTradeUserID, isD2uUser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEuinNo indicates an expected call of GetEuinNo.
func (mr *MockUserStoreMockRecorder) GetEuinNo(ctx, userID, matchAccount, callAndTradeUserID, isD2uUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEuinNo", reflect.TypeOf((*MockUserStore)(nil).GetEuinNo), ctx, userID, matchAccount, callAndTradeUserID, isD2uUser)
}

// GetPrivacyInfo mocks base method.
func (m *MockUserStore) GetPrivacyInfo(ctx context.Context, userID, panNo string, isModifyRequired bool) (*models.PrivacyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivacyInfo", ctx, userID, panNo, isModifyRequired)
	ret0, _ := ret[0].(*models.PrivacyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivacyInfo indicates an expected call of GetPrivacyInfo.
func (mr *MockUserStoreMockRecorder) GetPrivacyInfo(ctx, userID, panNo, isModifyRequired interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivacyInfo", reflect.TypeOf((*MockUserStore)(nil).GetPrivacyInfo), ctx, userID, panNo, isModifyRequired)
}

// GetSipHealthFlag mocks base method.
func (m *MockUserStore) GetSipHealthFlag(ctx context.Context, matchAccount string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSipHealthFlag", ctx, matchAccount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSipHealthFlag indicates an expected call of GetSipHealthFlag.
func (mr *MockUserStoreMockRecorder) GetSipHealthFlag(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipHealthFlag", reflect.TypeOf((*MockUserStore)(nil).GetSipHealthFlag), ctx, matchAccount)
}

// GetUserDetails mocks base method.
func (m *MockUserStore) GetUserDetails(ctx context.Context, userID, matchAccount, isAgent string) (*models.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetails", ctx, userID, matchAccount, isAgent)
	ret0, _ := ret[0].(*models.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetails indicates an expected call of GetUserDetails.
func (mr *MockUserStoreMockRecorder) GetUserDetails(ctx, userID, matchAccount, isAgent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetails", reflect.TypeOf((*MockUserStore)(nil).GetUserDetails), ctx, userID, matchAccount, isAgent)
}

// IsD2UActive mocks base method.
func (m *MockUserStore) IsD2UActive(ctx context.Context, matchAccount string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsD2UActive", ctx, matchAccount)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsD2UActive indicates an expected call of IsD2UActive.
func (mr *MockUserStoreMockRecorder) IsD2UActive(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsD2UActive", reflect.TypeOf((*MockUserStore)(nil).IsD2UActive), ctx, matchAccount)
}

// IsD2UEnabled mocks base method.
func (m *MockUserStore) IsD2UEnabled(ctx context.Context, matchAccount string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsD2UEnabled", ctx, matchAccount)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsD2UEnabled indicates an expected call of IsD2UEnabled.
func (mr *MockUserStoreMockRecorder) IsD2UEnabled(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsD2UEnabled", reflect.TypeOf((*MockUserStore)(nil).IsD2UEnabled), ctx, matchAccount)
}

// IsEATMEnabled mocks base method.
func (m *MockUserStore) IsEATMEnabled(ctx context.Context, matchAccount string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEATMEnabled", ctx, matchAccount)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEATMEnabled indicates an expected call of IsEATMEnabled.
func (mr *MockUserStoreMockRecorder) IsEATMEnabled(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEATMEnabled", reflect.TypeOf((*MockUserStore)(nil).IsEATMEnabled), ctx, matchAccount)
}

// getEuinNoForBPID mocks base method.
func (m *MockUserStore) getEuinNoForBPID(ctx context.Context, bpID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEuinNoForBPID", ctx, bpID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEuinNoForBPID indicates an expected call of getEuinNoForBPID.
func (mr *MockUserStoreMockRecorder) getEuinNoForBPID(ctx, bpID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEuinNoForBPID", reflect.TypeOf((*MockUserStore)(nil).getEuinNoForBPID), ctx, bpID)
}

// getEuinNoForBusinessPartner mocks base method.
func (m *MockUserStore) getEuinNoForBusinessPartner(ctx context.Context, bpID, matchAccount string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEuinNoForBusinessPartner", ctx, bpID, matchAccount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEuinNoForBusinessPartner indicates an expected call of getEuinNoForBusinessPartner.
func (mr *MockUserStoreMockRecorder) getEuinNoForBusinessPartner(ctx, bpID, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEuinNoForBusinessPartner", reflect.TypeOf((*MockUserStore)(nil).getEuinNoForBusinessPartner), ctx, bpID, matchAccount)
}

// getEuinNoForCallAndTradeUser mocks base method.
func (m *MockUserStore) getEuinNoForCallAndTradeUser(ctx context.Context, callAndTradeUserID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEuinNoForCallAndTradeUser", ctx, callAndTradeUserID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEuinNoForCallAndTradeUser indicates an expected call of getEuinNoForCallAndTradeUser.
func (mr *MockUserStoreMockRecorder) getEuinNoForCallAndTradeUser(ctx, callAndTradeUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEuinNoForCallAndTradeUser", reflect.TypeOf((*MockUserStore)(nil).getEuinNoForCallAndTradeUser), ctx, callAndTradeUserID)
}

// getEuinNoForRegularUser mocks base method.
func (m *MockUserStore) getEuinNoForRegularUser(ctx context.Context, matchAccount string, isD2uUser bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEuinNoForRegularUser", ctx, matchAccount, isD2uUser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEuinNoForRegularUser indicates an expected call of getEuinNoForRegularUser.
func (mr *MockUserStoreMockRecorder) getEuinNoForRegularUser(ctx, matchAccount, isD2uUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEuinNoForRegularUser", reflect.TypeOf((*MockUserStore)(nil).getEuinNoForRegularUser), ctx, matchAccount, isD2uUser)
}

// getExtraUserInfo mocks base method.
func (m *MockUserStore) getExtraUserInfo(ctx context.Context, matchAccount string) (*models.ExtraInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getExtraUserInfo", ctx, matchAccount)
	ret0, _ := ret[0].(*models.ExtraInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getExtraUserInfo indicates an expected call of getExtraUserInfo.
func (mr *MockUserStoreMockRecorder) getExtraUserInfo(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getExtraUserInfo", reflect.TypeOf((*MockUserStore)(nil).getExtraUserInfo), ctx, matchAccount)
}

// getPersonalInfo mocks base method.
func (m *MockUserStore) getPersonalInfo(ctx context.Context, matchAccount string) (*models.PersonalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPersonalInfo", ctx, matchAccount)
	ret0, _ := ret[0].(*models.PersonalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getPersonalInfo indicates an expected call of getPersonalInfo.
func (mr *MockUserStoreMockRecorder) getPersonalInfo(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPersonalInfo", reflect.TypeOf((*MockUserStore)(nil).getPersonalInfo), ctx, matchAccount)
}

// MockeuinNo is a mock of euinNo interface.
type MockeuinNo struct {
	ctrl     *gomock.Controller
	recorder *MockeuinNoMockRecorder
}

// MockeuinNoMockRecorder is the mock recorder for MockeuinNo.
type MockeuinNoMockRecorder struct {
	mock *MockeuinNo
}

// NewMockeuinNo creates a new mock instance.
func NewMockeuinNo(ctrl *gomock.Controller) *MockeuinNo {
	mock := &MockeuinNo{ctrl: ctrl}
	mock.recorder = &MockeuinNoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeuinNo) EXPECT() *MockeuinNoMockRecorder {
	return m.recorder
}

// GetEuinNo mocks base method.
func (m *MockeuinNo) GetEuinNo(ctx context.Context, userID, matchAccount, callAndTradeUserID string, isD2uUser bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEuinNo", ctx, userID, matchAccount, callAndTradeUserID, isD2uUser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEuinNo indicates an expected call of GetEuinNo.
func (mr *MockeuinNoMockRecorder) GetEuinNo(ctx, userID, matchAccount, callAndTradeUserID, isD2uUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEuinNo", reflect.TypeOf((*MockeuinNo)(nil).GetEuinNo), ctx, userID, matchAccount, callAndTradeUserID, isD2uUser)
}

// getEuinNoForBPID mocks base method.
func (m *MockeuinNo) getEuinNoForBPID(ctx context.Context, bpID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEuinNoForBPID", ctx, bpID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEuinNoForBPID indicates an expected call of getEuinNoForBPID.
func (mr *MockeuinNoMockRecorder) getEuinNoForBPID(ctx, bpID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEuinNoForBPID", reflect.TypeOf((*MockeuinNo)(nil).getEuinNoForBPID), ctx, bpID)
}

// getEuinNoForBusinessPartner mocks base method.
func (m *MockeuinNo) getEuinNoForBusinessPartner(ctx context.Context, bpID, matchAccount string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEuinNoForBusinessPartner", ctx, bpID, matchAccount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEuinNoForBusinessPartner indicates an expected call of getEuinNoForBusinessPartner.
func (mr *MockeuinNoMockRecorder) getEuinNoForBusinessPartner(ctx, bpID, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEuinNoForBusinessPartner", reflect.TypeOf((*MockeuinNo)(nil).getEuinNoForBusinessPartner), ctx, bpID, matchAccount)
}

// getEuinNoForCallAndTradeUser mocks base method.
func (m *MockeuinNo) getEuinNoForCallAndTradeUser(ctx context.Context, callAndTradeUserID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEuinNoForCallAndTradeUser", ctx, callAndTradeUserID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEuinNoForCallAndTradeUser indicates an expected call of getEuinNoForCallAndTradeUser.
func (mr *MockeuinNoMockRecorder) getEuinNoForCallAndTradeUser(ctx, callAndTradeUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEuinNoForCallAndTradeUser", reflect.TypeOf((*MockeuinNo)(nil).getEuinNoForCallAndTradeUser), ctx, callAndTradeUserID)
}

// getEuinNoForRegularUser mocks base method.
func (m *MockeuinNo) getEuinNoForRegularUser(ctx context.Context, matchAccount string, isD2uUser bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEuinNoForRegularUser", ctx, matchAccount, isD2uUser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEuinNoForRegularUser indicates an expected call of getEuinNoForRegularUser.
func (mr *MockeuinNoMockRecorder) getEuinNoForRegularUser(ctx, matchAccount, isD2uUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEuinNoForRegularUser", reflect.TypeOf((*MockeuinNo)(nil).getEuinNoForRegularUser), ctx, matchAccount, isD2uUser)
}
