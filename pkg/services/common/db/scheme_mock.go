// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/services/common/db/scheme.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	models "kisaanSathi/pkg/services/common/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSchemeFlagValidation is a mock of SchemeFlagValidation interface.
type MockSchemeFlagValidation struct {
	ctrl     *gomock.Controller
	recorder *MockSchemeFlagValidationMockRecorder
}

// MockSchemeFlagValidationMockRecorder is the mock recorder for MockSchemeFlagValidation.
type MockSchemeFlagValidationMockRecorder struct {
	mock *MockSchemeFlagValidation
}

// NewMockSchemeFlagValidation creates a new mock instance.
func NewMockSchemeFlagValidation(ctrl *gomock.Controller) *MockSchemeFlagValidation {
	mock := &MockSchemeFlagValidation{ctrl: ctrl}
	mock.recorder = &MockSchemeFlagValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemeFlagValidation) EXPECT() *MockSchemeFlagValidationMockRecorder {
	return m.recorder
}

// ValidateSchemeFlagsForPurchase mocks base method.
func (m *MockSchemeFlagValidation) ValidateSchemeFlagsForPurchase(ctx context.Context, compCode int, schemeCode string, isOfflineRequest bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForPurchase", ctx, compCode, schemeCode, isOfflineRequest)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForPurchase indicates an expected call of ValidateSchemeFlagsForPurchase.
func (mr *MockSchemeFlagValidationMockRecorder) ValidateSchemeFlagsForPurchase(ctx, compCode, schemeCode, isOfflineRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForPurchase", reflect.TypeOf((*MockSchemeFlagValidation)(nil).ValidateSchemeFlagsForPurchase), ctx, compCode, schemeCode, isOfflineRequest)
}

// ValidateSchemeFlagsForRedeem mocks base method.
func (m *MockSchemeFlagValidation) ValidateSchemeFlagsForRedeem(ctx context.Context, compCode int, schemeCode string, isSpecialInterval bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForRedeem", ctx, compCode, schemeCode, isSpecialInterval)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForRedeem indicates an expected call of ValidateSchemeFlagsForRedeem.
func (mr *MockSchemeFlagValidationMockRecorder) ValidateSchemeFlagsForRedeem(ctx, compCode, schemeCode, isSpecialInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForRedeem", reflect.TypeOf((*MockSchemeFlagValidation)(nil).ValidateSchemeFlagsForRedeem), ctx, compCode, schemeCode, isSpecialInterval)
}

// ValidateSchemeFlagsForSIP mocks base method.
func (m *MockSchemeFlagValidation) ValidateSchemeFlagsForSIP(ctx context.Context, compCode int, schemeCode string, isOfflineRequest bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForSIP", ctx, compCode, schemeCode, isOfflineRequest)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForSIP indicates an expected call of ValidateSchemeFlagsForSIP.
func (mr *MockSchemeFlagValidationMockRecorder) ValidateSchemeFlagsForSIP(ctx, compCode, schemeCode, isOfflineRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForSIP", reflect.TypeOf((*MockSchemeFlagValidation)(nil).ValidateSchemeFlagsForSIP), ctx, compCode, schemeCode, isOfflineRequest)
}

// ValidateSchemeFlagsForSTP mocks base method.
func (m *MockSchemeFlagValidation) ValidateSchemeFlagsForSTP(ctx context.Context, compCode int, schemeCode string, isSpecialInterval, isBoosterSTP, isDematHolding bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForSTP", ctx, compCode, schemeCode, isSpecialInterval, isBoosterSTP, isDematHolding)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForSTP indicates an expected call of ValidateSchemeFlagsForSTP.
func (mr *MockSchemeFlagValidationMockRecorder) ValidateSchemeFlagsForSTP(ctx, compCode, schemeCode, isSpecialInterval, isBoosterSTP, isDematHolding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForSTP", reflect.TypeOf((*MockSchemeFlagValidation)(nil).ValidateSchemeFlagsForSTP), ctx, compCode, schemeCode, isSpecialInterval, isBoosterSTP, isDematHolding)
}

// ValidateSchemeFlagsForSWP mocks base method.
func (m *MockSchemeFlagValidation) ValidateSchemeFlagsForSWP(ctx context.Context, compCode int, schemeCode string, isSpecialInterval bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForSWP", ctx, compCode, schemeCode, isSpecialInterval)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForSWP indicates an expected call of ValidateSchemeFlagsForSWP.
func (mr *MockSchemeFlagValidationMockRecorder) ValidateSchemeFlagsForSWP(ctx, compCode, schemeCode, isSpecialInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForSWP", reflect.TypeOf((*MockSchemeFlagValidation)(nil).ValidateSchemeFlagsForSWP), ctx, compCode, schemeCode, isSpecialInterval)
}

// ValidateSchemeFlagsForSwitch mocks base method.
func (m *MockSchemeFlagValidation) ValidateSchemeFlagsForSwitch(ctx context.Context, compCode int, schemeCode string, isSpecialInterval bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForSwitch", ctx, compCode, schemeCode, isSpecialInterval)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForSwitch indicates an expected call of ValidateSchemeFlagsForSwitch.
func (mr *MockSchemeFlagValidationMockRecorder) ValidateSchemeFlagsForSwitch(ctx, compCode, schemeCode, isSpecialInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForSwitch", reflect.TypeOf((*MockSchemeFlagValidation)(nil).ValidateSchemeFlagsForSwitch), ctx, compCode, schemeCode, isSpecialInterval)
}

// commonSchemeValidation mocks base method.
func (m *MockSchemeFlagValidation) commonSchemeValidation(ctx context.Context, schemeFlags *models.SchemeFlags, isOfflineRequest, isSpecialInterval bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "commonSchemeValidation", ctx, schemeFlags, isOfflineRequest, isSpecialInterval)
	ret0, _ := ret[0].(error)
	return ret0
}

// commonSchemeValidation indicates an expected call of commonSchemeValidation.
func (mr *MockSchemeFlagValidationMockRecorder) commonSchemeValidation(ctx, schemeFlags, isOfflineRequest, isSpecialInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "commonSchemeValidation", reflect.TypeOf((*MockSchemeFlagValidation)(nil).commonSchemeValidation), ctx, schemeFlags, isOfflineRequest, isSpecialInterval)
}

// MockSchemeStore is a mock of SchemeStore interface.
type MockSchemeStore struct {
	ctrl     *gomock.Controller
	recorder *MockSchemeStoreMockRecorder
}

// MockSchemeStoreMockRecorder is the mock recorder for MockSchemeStore.
type MockSchemeStoreMockRecorder struct {
	mock *MockSchemeStore
}

// NewMockSchemeStore creates a new mock instance.
func NewMockSchemeStore(ctrl *gomock.Controller) *MockSchemeStore {
	mock := &MockSchemeStore{ctrl: ctrl}
	mock.recorder = &MockSchemeStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemeStore) EXPECT() *MockSchemeStoreMockRecorder {
	return m.recorder
}

// GetCompanyFolio mocks base method.
func (m *MockSchemeStore) GetCompanyFolio(ctx context.Context, compCode int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyFolio", ctx, compCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyFolio indicates an expected call of GetCompanyFolio.
func (mr *MockSchemeStoreMockRecorder) GetCompanyFolio(ctx, compCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyFolio", reflect.TypeOf((*MockSchemeStore)(nil).GetCompanyFolio), ctx, compCode)
}

// GetCompanyRegistrar mocks base method.
func (m *MockSchemeStore) GetCompanyRegistrar(ctx context.Context, compCode int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyRegistrar", ctx, compCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyRegistrar indicates an expected call of GetCompanyRegistrar.
func (mr *MockSchemeStoreMockRecorder) GetCompanyRegistrar(ctx, compCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyRegistrar", reflect.TypeOf((*MockSchemeStore)(nil).GetCompanyRegistrar), ctx, compCode)
}

// GetRedeemSchemeDetails mocks base method.
func (m *MockSchemeStore) GetRedeemSchemeDetails(ctx context.Context, compCode int, schemeCode, holdingMode, accountType string) (*models.RedeemSchemeDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedeemSchemeDetails", ctx, compCode, schemeCode, holdingMode, accountType)
	ret0, _ := ret[0].(*models.RedeemSchemeDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedeemSchemeDetails indicates an expected call of GetRedeemSchemeDetails.
func (mr *MockSchemeStoreMockRecorder) GetRedeemSchemeDetails(ctx, compCode, schemeCode, holdingMode, accountType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedeemSchemeDetails", reflect.TypeOf((*MockSchemeStore)(nil).GetRedeemSchemeDetails), ctx, compCode, schemeCode, holdingMode, accountType)
}

// GetSchemeDetails mocks base method.
func (m *MockSchemeStore) GetSchemeDetails(ctx context.Context, compCode int, schemeCode string) (*models.SchemeDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemeDetails", ctx, compCode, schemeCode)
	ret0, _ := ret[0].(*models.SchemeDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemeDetails indicates an expected call of GetSchemeDetails.
func (mr *MockSchemeStoreMockRecorder) GetSchemeDetails(ctx, compCode, schemeCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemeDetails", reflect.TypeOf((*MockSchemeStore)(nil).GetSchemeDetails), ctx, compCode, schemeCode)
}

// GetSchemeFlags mocks base method.
func (m *MockSchemeStore) GetSchemeFlags(ctx context.Context, compCode int, schemeCode string) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemeFlags", ctx, compCode, schemeCode)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemeFlags indicates an expected call of GetSchemeFlags.
func (mr *MockSchemeStoreMockRecorder) GetSchemeFlags(ctx, compCode, schemeCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemeFlags", reflect.TypeOf((*MockSchemeStore)(nil).GetSchemeFlags), ctx, compCode, schemeCode)
}

// GetSchemeNavDetails mocks base method.
func (m *MockSchemeStore) GetSchemeNavDetails(ctx context.Context, compCode int, schemeCode string) (*models.NavDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemeNavDetails", ctx, compCode, schemeCode)
	ret0, _ := ret[0].(*models.NavDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemeNavDetails indicates an expected call of GetSchemeNavDetails.
func (mr *MockSchemeStoreMockRecorder) GetSchemeNavDetails(ctx, compCode, schemeCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemeNavDetails", reflect.TypeOf((*MockSchemeStore)(nil).GetSchemeNavDetails), ctx, compCode, schemeCode)
}

// IsParamEATMEnabled mocks base method.
func (m *MockSchemeStore) IsParamEATMEnabled(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsParamEATMEnabled", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsParamEATMEnabled indicates an expected call of IsParamEATMEnabled.
func (mr *MockSchemeStoreMockRecorder) IsParamEATMEnabled(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsParamEATMEnabled", reflect.TypeOf((*MockSchemeStore)(nil).IsParamEATMEnabled), ctx)
}

// IsSchemeEATMEnabled mocks base method.
func (m *MockSchemeStore) IsSchemeEATMEnabled(ctx context.Context, compCode int, schemeCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSchemeEATMEnabled", ctx, compCode, schemeCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSchemeEATMEnabled indicates an expected call of IsSchemeEATMEnabled.
func (mr *MockSchemeStoreMockRecorder) IsSchemeEATMEnabled(ctx, compCode, schemeCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSchemeEATMEnabled", reflect.TypeOf((*MockSchemeStore)(nil).IsSchemeEATMEnabled), ctx, compCode, schemeCode)
}

// ValidateSchemeFlagsForPurchase mocks base method.
func (m *MockSchemeStore) ValidateSchemeFlagsForPurchase(ctx context.Context, compCode int, schemeCode string, isOfflineRequest bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForPurchase", ctx, compCode, schemeCode, isOfflineRequest)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForPurchase indicates an expected call of ValidateSchemeFlagsForPurchase.
func (mr *MockSchemeStoreMockRecorder) ValidateSchemeFlagsForPurchase(ctx, compCode, schemeCode, isOfflineRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForPurchase", reflect.TypeOf((*MockSchemeStore)(nil).ValidateSchemeFlagsForPurchase), ctx, compCode, schemeCode, isOfflineRequest)
}

// ValidateSchemeFlagsForRedeem mocks base method.
func (m *MockSchemeStore) ValidateSchemeFlagsForRedeem(ctx context.Context, compCode int, schemeCode string, isSpecialInterval bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForRedeem", ctx, compCode, schemeCode, isSpecialInterval)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForRedeem indicates an expected call of ValidateSchemeFlagsForRedeem.
func (mr *MockSchemeStoreMockRecorder) ValidateSchemeFlagsForRedeem(ctx, compCode, schemeCode, isSpecialInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForRedeem", reflect.TypeOf((*MockSchemeStore)(nil).ValidateSchemeFlagsForRedeem), ctx, compCode, schemeCode, isSpecialInterval)
}

// ValidateSchemeFlagsForSIP mocks base method.
func (m *MockSchemeStore) ValidateSchemeFlagsForSIP(ctx context.Context, compCode int, schemeCode string, isOfflineRequest bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForSIP", ctx, compCode, schemeCode, isOfflineRequest)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForSIP indicates an expected call of ValidateSchemeFlagsForSIP.
func (mr *MockSchemeStoreMockRecorder) ValidateSchemeFlagsForSIP(ctx, compCode, schemeCode, isOfflineRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForSIP", reflect.TypeOf((*MockSchemeStore)(nil).ValidateSchemeFlagsForSIP), ctx, compCode, schemeCode, isOfflineRequest)
}

// ValidateSchemeFlagsForSTP mocks base method.
func (m *MockSchemeStore) ValidateSchemeFlagsForSTP(ctx context.Context, compCode int, schemeCode string, isSpecialInterval, isBoosterSTP, isDematHolding bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForSTP", ctx, compCode, schemeCode, isSpecialInterval, isBoosterSTP, isDematHolding)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForSTP indicates an expected call of ValidateSchemeFlagsForSTP.
func (mr *MockSchemeStoreMockRecorder) ValidateSchemeFlagsForSTP(ctx, compCode, schemeCode, isSpecialInterval, isBoosterSTP, isDematHolding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForSTP", reflect.TypeOf((*MockSchemeStore)(nil).ValidateSchemeFlagsForSTP), ctx, compCode, schemeCode, isSpecialInterval, isBoosterSTP, isDematHolding)
}

// ValidateSchemeFlagsForSWP mocks base method.
func (m *MockSchemeStore) ValidateSchemeFlagsForSWP(ctx context.Context, compCode int, schemeCode string, isSpecialInterval bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForSWP", ctx, compCode, schemeCode, isSpecialInterval)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForSWP indicates an expected call of ValidateSchemeFlagsForSWP.
func (mr *MockSchemeStoreMockRecorder) ValidateSchemeFlagsForSWP(ctx, compCode, schemeCode, isSpecialInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForSWP", reflect.TypeOf((*MockSchemeStore)(nil).ValidateSchemeFlagsForSWP), ctx, compCode, schemeCode, isSpecialInterval)
}

// ValidateSchemeFlagsForSwitch mocks base method.
func (m *MockSchemeStore) ValidateSchemeFlagsForSwitch(ctx context.Context, compCode int, schemeCode string, isSpecialInterval bool) (*models.SchemeFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchemeFlagsForSwitch", ctx, compCode, schemeCode, isSpecialInterval)
	ret0, _ := ret[0].(*models.SchemeFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSchemeFlagsForSwitch indicates an expected call of ValidateSchemeFlagsForSwitch.
func (mr *MockSchemeStoreMockRecorder) ValidateSchemeFlagsForSwitch(ctx, compCode, schemeCode, isSpecialInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchemeFlagsForSwitch", reflect.TypeOf((*MockSchemeStore)(nil).ValidateSchemeFlagsForSwitch), ctx, compCode, schemeCode, isSpecialInterval)
}

// commonSchemeValidation mocks base method.
func (m *MockSchemeStore) commonSchemeValidation(ctx context.Context, schemeFlags *models.SchemeFlags, isOfflineRequest, isSpecialInterval bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "commonSchemeValidation", ctx, schemeFlags, isOfflineRequest, isSpecialInterval)
	ret0, _ := ret[0].(error)
	return ret0
}

// commonSchemeValidation indicates an expected call of commonSchemeValidation.
func (mr *MockSchemeStoreMockRecorder) commonSchemeValidation(ctx, schemeFlags, isOfflineRequest, isSpecialInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "commonSchemeValidation", reflect.TypeOf((*MockSchemeStore)(nil).commonSchemeValidation), ctx, schemeFlags, isOfflineRequest, isSpecialInterval)
}
