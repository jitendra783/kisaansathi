// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/services/common/db/analytics.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAnalyticsStore is a mock of AnalyticsStore interface.
type MockAnalyticsStore struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsStoreMockRecorder
}

// MockAnalyticsStoreMockRecorder is the mock recorder for MockAnalyticsStore.
type MockAnalyticsStoreMockRecorder struct {
	mock *MockAnalyticsStore
}

// NewMockAnalyticsStore creates a new mock instance.
func NewMockAnalyticsStore(ctrl *gomock.Controller) *MockAnalyticsStore {
	mock := &MockAnalyticsStore{ctrl: ctrl}
	mock.recorder = &MockAnalyticsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsStore) EXPECT() *MockAnalyticsStoreMockRecorder {
	return m.recorder
}

// UpdateCampaignClickEvent mocks base method.
func (m *MockAnalyticsStore) UpdateCampaignClickEvent(ctx context.Context, matchAccount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaignClickEvent", ctx, matchAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCampaignClickEvent indicates an expected call of UpdateCampaignClickEvent.
func (mr *MockAnalyticsStoreMockRecorder) UpdateCampaignClickEvent(ctx, matchAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignClickEvent", reflect.TypeOf((*MockAnalyticsStore)(nil).UpdateCampaignClickEvent), ctx, matchAccount)
}
